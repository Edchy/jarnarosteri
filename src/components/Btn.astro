---
interface Props {
  text: string;
}

const { text } = Astro.props;
---

<button class="pushable">
  <span class="shadow"></span>
  <span class="edge"></span>
  <span class="front"> {text} </span>
</button>
<style>
  .pushable {
    position: relative;
    border: none;
    background: transparent;
    padding: 0;
    cursor: pointer;
    outline-offset: 4px;
    transition: filter 250ms;
  }
  .shadow {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 12px;
    background: hsl(0deg 0% 0% / 0.15);
    will-change: transform;
    transform: translateY(2px);
    transition: transform 600ms cubic-bezier(0.3, 0.7, 0.4, 1);
  }
  .edge {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 12px;
    background: linear-gradient(
      to left,
      hsl(from var(--color-brand-2) h s 30%) 0%,
      hsl(from var(--color-brand-2) h s 50%) 8%,
      hsl(from var(--color-brand-2) h s 50%) 92%,
      hsl(from var(--color-brand-2) h s 30%) 100%
    );
  }
  .front {
    display: block;
    position: relative;
    /* padding: 12px 32px; */
    padding: 8px 22px;
    border-radius: 12px;
    font-size: 1rem;
    font-family: Inter;
    font-weight: bold;
    color: white;
    background: var(--color-brand-2);
    will-change: transform;
    transform: translateY(-4px);
    transition: transform 600ms cubic-bezier(0.3, 0.7, 0.4, 1);
  }
  .pushable:hover {
    filter: brightness(110%);
  }
  .pushable:hover .front {
    transform: translateY(-6px);
    transition: transform 250ms cubic-bezier(0.3, 0.7, 0.4, 1.5);
  }
  .pushable:active .front {
    transform: translateY(-2px);
    transition: transform 34ms;
  }
  .pushable:hover .shadow {
    transform: translateY(4px);
    transition: transform 250ms cubic-bezier(0.3, 0.7, 0.4, 1.5);
  }
  .pushable:active .shadow {
    transform: translateY(1px);
    transition: transform 34ms;
  }
  .pushable:focus:not(:focus-visible) {
    outline: none;
  }
</style>
